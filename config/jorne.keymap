/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BSPC | RSE |

            bindings = <
&none  &kp GRAVE     &kp Q           &kp W           &kp E        &kp R             &ht RA(T) T    &kp Y      &kp U             &kp I              &kp O           &kp P                   &kp LBKT    &none
       &kp TAB       &ht LEFT_WIN A  &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G          &kp H      &ht LEFT_SHIFT J  &ht LCTRL K        &ht LEFT_ALT L  &ht LEFT_WIN SEMICOLON  &kp SQT
       &kp CAPSLOCK  &kp Z           &kp X           &kp C        &kp V             &kp B          &kp N      &ht RA(M) M       &kp RIGHT_BRACKET  &kp SLASH       &kp COMMA               &kp PERIOD
                                                     &kp ESCAPE   &mo 2             &kp SPACE      &kp ENTER  &mo 1             &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &trans  &kp HOME          &kp LC(LEFT)       &kp UP_ARROW    &kp LC(RIGHT)         &kp PAGE_UP      &kp PLUS      &kp LS(N7)                   &kp LS(N7)        &kp LS(N9)                 &kp KP_MULTIPLY         &trans  &none
       &trans  &ht LEFT_WIN END  &ht LEFT_ALT LEFT  &ht LCTRL DOWN  &ht LEFT_SHIFT RIGHT  &kp PAGE_DOWN    &kp KP_MINUS  &ht LEFT_SHIFT LS(NUMBER_4)  &ht LCTRL LS(N5)  &ht LEFT_ALT LS(NUMBER_6)  &ht LEFT_WIN KP_DIVIDE  &trans
       &trans  &trans            &kp LS(LC(LEFT))   &trans          &kp LS(LC(RIGHT))     &kp INSERT       &kp EQUAL     &kp LS(NUMBER_1)             &kp LS(NUMBER_2)  &kp LS(NUMBER_3)           &kp LS(N0)              &trans
                                                    &trans          &mo 3                 &trans           &trans        &mo 3                        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&none  &none          &kp SQT            &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_6       &kp RS(BACKSLASH)  &kp RA(LEFT_BRACKET)      &kp RA(RIGHT_BRACKET)      &kp LS(PERIOD)  &kp GRAVE       &none                     &none
       &kp N5         &kp BACKSLASH      &kp NUMBER_8   &kp MINUS     &kp LS(EQUAL)  &kp EQUAL          &kp SLASH          &kp NUMBER_9              &kp NUMBER_0               &kp LS(COMMA)   &kp LS(GRAVE)   &none
       &kp RA(GRAVE)  &kp RS(RA(SLASH))  &kp RA(MINUS)  &kp NUMBER_1  &kp NUMBER_7   &kp RA(RS(SQT))    &kp RS(MINUS)      &kp RA(RS(LEFT_BRACKET))  &kp RS(RA(RIGHT_BRACKET))  &kp RA(COMMA)   &kp RA(PERIOD)  &kp RA(NON_US_BACKSLASH)
                                                        &trans        &mo 3          &trans             &trans             &mo 3                     &kp DEL
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&bootloader  &kp K_POWER  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none       &none
             &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
             &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                                      &trans        &none         &trans          &trans        &none         &trans
            >;
        };
    };
};
