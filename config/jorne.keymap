/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    macros {
        dot: dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp EQUAL>;

            label = "DOT";
        };
        privet: privet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap "Привет">;
            label = "PRIVET";
        };
    };

    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BSPC | RSE |

            bindings = <
&bt BT_CLR_ALL  &kp GRAVE         &privet  &kp W           &kp E           &kp R        &kp T               &kp Y             &kp U        &kp I           &kp O           &kp P     &kp LBKT       &kp LEFT_WIN
                &kp TAB           &kp A  &ht LEFT_WIN S  &ht LEFT_ALT D  &ht LCTRL F  &ht LEFT_SHIFT G    &ht LEFT_SHIFT H  &ht LCTRL J  &ht LEFT_ALT K  &ht LEFT_WIN L  &kp SEMI  &mt RCTRL SQT
                &kp LS(LEFT_ALT)  &kp Z  &kp X           &kp C           &kp V        &kp B               &kp N             &kp M        &kp COMMA       &kp DOT         &kp DOT   &dot
                                                         &kp ESCAPE      &mo 2        &kp SPACE           &kp ENTER         &mo 1        &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp HOME  &kp LC(LEFT)       &kp UP_ARROW       &kp LC(RIGHT)      &kp PAGE_UP                 &kp PLUS                 &kp KP_NUMBER_7        &kp KP_NUMBER_8           &kp KP_NUMBER_9           &kp KP_MULTIPLY         &trans  &trans
        &trans  &kp END   &ht LEFT_WIN LEFT  &ht LEFT_ALT DOWN  &ht LCTRL RIGHT    &ht LEFT_SHIFT PAGE_DOWN    &ht LEFT_SHIFT KP_MINUS  &ht LCTRL KP_NUMBER_4  &ht LEFT_ALT KP_NUMBER_5  &ht NUMBER_6 KP_NUMBER_6  &ht LEFT_WIN KP_DIVIDE  &trans
        &trans  &trans    &kp LS(LC(LEFT))   &trans             &kp LS(LC(RIGHT))  &kp INSERT                  &kp KP_NUMBER_0          &kp KP_NUMBER_1        &kp KP_NUMBER_2           &kp KP_NUMBER_3           &kp EQUAL               &trans
                                             &trans             &mo 3              &trans                      &trans                   &mo 3                  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&trans  &kp F12          &kp F1            &kp F2            &kp F3            &kp F4      &kp F5        &kp F6            &kp F7            &kp F8             &kp F9          &kp F10          &kp F11          &trans
        &mt LCTRL EQUAL  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(N4)  &kp LS(N5)    &kp LS(NUMBER_6)  &kp LS(N7)        &kp LS(N8)         &kp LS(N9)      &kp LS(N0)       &mt RCTRL K_APP
        &trans           &trans            &trans            &trans            &kp DOLLAR  &kp COLON     &kp SEMICOLON     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp UNDERSCORE
                                                             &trans            &mo 3       &trans        &trans            &mo 3             &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&sys_reset  &bootloader  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader  &sys_reset
            &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
            &none        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
                                                     &trans        &none         &trans          &trans        &none         &trans
            >;
        };
    };
};
